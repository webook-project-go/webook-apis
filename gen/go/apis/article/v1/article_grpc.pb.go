// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: apis/article/v1/article.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ArticleService_Save_FullMethodName             = "/ArticleService/Save"
	ArticleService_Publish_FullMethodName          = "/ArticleService/Publish"
	ArticleService_ListPublished_FullMethodName    = "/ArticleService/ListPublished"
	ArticleService_ListEdited_FullMethodName       = "/ArticleService/ListEdited"
	ArticleService_GetPublishedByID_FullMethodName = "/ArticleService/GetPublishedByID"
	ArticleService_GetEditedByID_FullMethodName    = "/ArticleService/GetEditedByID"
)

// ArticleServiceClient is the client API for ArticleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticleServiceClient interface {
	Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*SaveResponse, error)
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	ListPublished(ctx context.Context, in *ListPublishedRequest, opts ...grpc.CallOption) (*ListPublishedResponse, error)
	ListEdited(ctx context.Context, in *ListEditedRequest, opts ...grpc.CallOption) (*ListEditedResponse, error)
	GetPublishedByID(ctx context.Context, in *GetPublishedByIDRequest, opts ...grpc.CallOption) (*GetPublishedByIDResponse, error)
	GetEditedByID(ctx context.Context, in *GetEditedByIDRequest, opts ...grpc.CallOption) (*GetEditedByIDResponse, error)
}

type articleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleServiceClient(cc grpc.ClientConnInterface) ArticleServiceClient {
	return &articleServiceClient{cc}
}

func (c *articleServiceClient) Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*SaveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveResponse)
	err := c.cc.Invoke(ctx, ArticleService_Save_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, ArticleService_Publish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) ListPublished(ctx context.Context, in *ListPublishedRequest, opts ...grpc.CallOption) (*ListPublishedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPublishedResponse)
	err := c.cc.Invoke(ctx, ArticleService_ListPublished_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) ListEdited(ctx context.Context, in *ListEditedRequest, opts ...grpc.CallOption) (*ListEditedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEditedResponse)
	err := c.cc.Invoke(ctx, ArticleService_ListEdited_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) GetPublishedByID(ctx context.Context, in *GetPublishedByIDRequest, opts ...grpc.CallOption) (*GetPublishedByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPublishedByIDResponse)
	err := c.cc.Invoke(ctx, ArticleService_GetPublishedByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) GetEditedByID(ctx context.Context, in *GetEditedByIDRequest, opts ...grpc.CallOption) (*GetEditedByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEditedByIDResponse)
	err := c.cc.Invoke(ctx, ArticleService_GetEditedByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleServiceServer is the server API for ArticleService service.
// All implementations must embed UnimplementedArticleServiceServer
// for forward compatibility.
type ArticleServiceServer interface {
	Save(context.Context, *SaveRequest) (*SaveResponse, error)
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	ListPublished(context.Context, *ListPublishedRequest) (*ListPublishedResponse, error)
	ListEdited(context.Context, *ListEditedRequest) (*ListEditedResponse, error)
	GetPublishedByID(context.Context, *GetPublishedByIDRequest) (*GetPublishedByIDResponse, error)
	GetEditedByID(context.Context, *GetEditedByIDRequest) (*GetEditedByIDResponse, error)
	mustEmbedUnimplementedArticleServiceServer()
}

// UnimplementedArticleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedArticleServiceServer struct{}

func (UnimplementedArticleServiceServer) Save(context.Context, *SaveRequest) (*SaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedArticleServiceServer) Publish(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedArticleServiceServer) ListPublished(context.Context, *ListPublishedRequest) (*ListPublishedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublished not implemented")
}
func (UnimplementedArticleServiceServer) ListEdited(context.Context, *ListEditedRequest) (*ListEditedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEdited not implemented")
}
func (UnimplementedArticleServiceServer) GetPublishedByID(context.Context, *GetPublishedByIDRequest) (*GetPublishedByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublishedByID not implemented")
}
func (UnimplementedArticleServiceServer) GetEditedByID(context.Context, *GetEditedByIDRequest) (*GetEditedByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEditedByID not implemented")
}
func (UnimplementedArticleServiceServer) mustEmbedUnimplementedArticleServiceServer() {}
func (UnimplementedArticleServiceServer) testEmbeddedByValue()                        {}

// UnsafeArticleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleServiceServer will
// result in compilation errors.
type UnsafeArticleServiceServer interface {
	mustEmbedUnimplementedArticleServiceServer()
}

func RegisterArticleServiceServer(s grpc.ServiceRegistrar, srv ArticleServiceServer) {
	// If the following call pancis, it indicates UnimplementedArticleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ArticleService_ServiceDesc, srv)
}

func _ArticleService_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_Save_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).Save(ctx, req.(*SaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_ListPublished_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPublishedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).ListPublished(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_ListPublished_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).ListPublished(ctx, req.(*ListPublishedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_ListEdited_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEditedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).ListEdited(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_ListEdited_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).ListEdited(ctx, req.(*ListEditedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_GetPublishedByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublishedByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).GetPublishedByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_GetPublishedByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).GetPublishedByID(ctx, req.(*GetPublishedByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_GetEditedByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEditedByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).GetEditedByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_GetEditedByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).GetEditedByID(ctx, req.(*GetEditedByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArticleService_ServiceDesc is the grpc.ServiceDesc for ArticleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArticleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ArticleService",
	HandlerType: (*ArticleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _ArticleService_Save_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _ArticleService_Publish_Handler,
		},
		{
			MethodName: "ListPublished",
			Handler:    _ArticleService_ListPublished_Handler,
		},
		{
			MethodName: "ListEdited",
			Handler:    _ArticleService_ListEdited_Handler,
		},
		{
			MethodName: "GetPublishedByID",
			Handler:    _ArticleService_GetPublishedByID_Handler,
		},
		{
			MethodName: "GetEditedByID",
			Handler:    _ArticleService_GetEditedByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apis/article/v1/article.proto",
}
