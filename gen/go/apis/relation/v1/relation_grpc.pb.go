// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: apis/relation/v1/relation.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RelationService_Follow_FullMethodName           = "/RelationService/Follow"
	RelationService_UnFollow_FullMethodName         = "/RelationService/UnFollow"
	RelationService_GetFollowers_FullMethodName     = "/RelationService/GetFollowers"
	RelationService_GetFollowees_FullMethodName     = "/RelationService/GetFollowees"
	RelationService_GetFollowerCount_FullMethodName = "/RelationService/GetFollowerCount"
	RelationService_GetFolloweeCount_FullMethodName = "/RelationService/GetFolloweeCount"
)

// RelationServiceClient is the client API for RelationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelationServiceClient interface {
	Follow(ctx context.Context, in *RelationInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnFollow(ctx context.Context, in *RelationInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetFollowers(ctx context.Context, in *GetFollowersReq, opts ...grpc.CallOption) (*UserIDList, error)
	GetFollowees(ctx context.Context, in *GetFolloweesReq, opts ...grpc.CallOption) (*UserIDList, error)
	GetFollowerCount(ctx context.Context, in *GetFollowerCountReq, opts ...grpc.CallOption) (*FollowerCountResp, error)
	GetFolloweeCount(ctx context.Context, in *GetFolloweeCountReq, opts ...grpc.CallOption) (*FolloweeCountResp, error)
}

type relationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationServiceClient(cc grpc.ClientConnInterface) RelationServiceClient {
	return &relationServiceClient{cc}
}

func (c *relationServiceClient) Follow(ctx context.Context, in *RelationInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RelationService_Follow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) UnFollow(ctx context.Context, in *RelationInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RelationService_UnFollow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) GetFollowers(ctx context.Context, in *GetFollowersReq, opts ...grpc.CallOption) (*UserIDList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserIDList)
	err := c.cc.Invoke(ctx, RelationService_GetFollowers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) GetFollowees(ctx context.Context, in *GetFolloweesReq, opts ...grpc.CallOption) (*UserIDList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserIDList)
	err := c.cc.Invoke(ctx, RelationService_GetFollowees_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) GetFollowerCount(ctx context.Context, in *GetFollowerCountReq, opts ...grpc.CallOption) (*FollowerCountResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FollowerCountResp)
	err := c.cc.Invoke(ctx, RelationService_GetFollowerCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) GetFolloweeCount(ctx context.Context, in *GetFolloweeCountReq, opts ...grpc.CallOption) (*FolloweeCountResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FolloweeCountResp)
	err := c.cc.Invoke(ctx, RelationService_GetFolloweeCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationServiceServer is the server API for RelationService service.
// All implementations must embed UnimplementedRelationServiceServer
// for forward compatibility.
type RelationServiceServer interface {
	Follow(context.Context, *RelationInfo) (*emptypb.Empty, error)
	UnFollow(context.Context, *RelationInfo) (*emptypb.Empty, error)
	GetFollowers(context.Context, *GetFollowersReq) (*UserIDList, error)
	GetFollowees(context.Context, *GetFolloweesReq) (*UserIDList, error)
	GetFollowerCount(context.Context, *GetFollowerCountReq) (*FollowerCountResp, error)
	GetFolloweeCount(context.Context, *GetFolloweeCountReq) (*FolloweeCountResp, error)
	mustEmbedUnimplementedRelationServiceServer()
}

// UnimplementedRelationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRelationServiceServer struct{}

func (UnimplementedRelationServiceServer) Follow(context.Context, *RelationInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (UnimplementedRelationServiceServer) UnFollow(context.Context, *RelationInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnFollow not implemented")
}
func (UnimplementedRelationServiceServer) GetFollowers(context.Context, *GetFollowersReq) (*UserIDList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowers not implemented")
}
func (UnimplementedRelationServiceServer) GetFollowees(context.Context, *GetFolloweesReq) (*UserIDList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowees not implemented")
}
func (UnimplementedRelationServiceServer) GetFollowerCount(context.Context, *GetFollowerCountReq) (*FollowerCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowerCount not implemented")
}
func (UnimplementedRelationServiceServer) GetFolloweeCount(context.Context, *GetFolloweeCountReq) (*FolloweeCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFolloweeCount not implemented")
}
func (UnimplementedRelationServiceServer) mustEmbedUnimplementedRelationServiceServer() {}
func (UnimplementedRelationServiceServer) testEmbeddedByValue()                         {}

// UnsafeRelationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationServiceServer will
// result in compilation errors.
type UnsafeRelationServiceServer interface {
	mustEmbedUnimplementedRelationServiceServer()
}

func RegisterRelationServiceServer(s grpc.ServiceRegistrar, srv RelationServiceServer) {
	// If the following call pancis, it indicates UnimplementedRelationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RelationService_ServiceDesc, srv)
}

func _RelationService_Follow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).Follow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_Follow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).Follow(ctx, req.(*RelationInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_UnFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).UnFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_UnFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).UnFollow(ctx, req.(*RelationInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_GetFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).GetFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_GetFollowers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).GetFollowers(ctx, req.(*GetFollowersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_GetFollowees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFolloweesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).GetFollowees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_GetFollowees_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).GetFollowees(ctx, req.(*GetFolloweesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_GetFollowerCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowerCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).GetFollowerCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_GetFollowerCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).GetFollowerCount(ctx, req.(*GetFollowerCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_GetFolloweeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFolloweeCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).GetFolloweeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_GetFolloweeCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).GetFolloweeCount(ctx, req.(*GetFolloweeCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RelationService_ServiceDesc is the grpc.ServiceDesc for RelationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RelationService",
	HandlerType: (*RelationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Follow",
			Handler:    _RelationService_Follow_Handler,
		},
		{
			MethodName: "UnFollow",
			Handler:    _RelationService_UnFollow_Handler,
		},
		{
			MethodName: "GetFollowers",
			Handler:    _RelationService_GetFollowers_Handler,
		},
		{
			MethodName: "GetFollowees",
			Handler:    _RelationService_GetFollowees_Handler,
		},
		{
			MethodName: "GetFollowerCount",
			Handler:    _RelationService_GetFollowerCount_Handler,
		},
		{
			MethodName: "GetFolloweeCount",
			Handler:    _RelationService_GetFolloweeCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apis/relation/v1/relation.proto",
}
