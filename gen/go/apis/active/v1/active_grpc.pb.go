// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: apis/active/v1/active.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ActiveService_IsActive_FullMethodName        = "/ActiveService/IsActive"
	ActiveService_GetLastActiveAt_FullMethodName = "/ActiveService/GetLastActiveAt"
	ActiveService_GetActiveUsers_FullMethodName  = "/ActiveService/GetActiveUsers"
)

// ActiveServiceClient is the client API for ActiveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActiveServiceClient interface {
	IsActive(ctx context.Context, in *IsActiveRequest, opts ...grpc.CallOption) (*IsActiveResponse, error)
	GetLastActiveAt(ctx context.Context, in *GetLastActiveAtRequest, opts ...grpc.CallOption) (*GetLastActiveAtResponse, error)
	GetActiveUsers(ctx context.Context, in *GetActiveUsersRequest, opts ...grpc.CallOption) (*GetActiveUsersResponse, error)
}

type activeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActiveServiceClient(cc grpc.ClientConnInterface) ActiveServiceClient {
	return &activeServiceClient{cc}
}

func (c *activeServiceClient) IsActive(ctx context.Context, in *IsActiveRequest, opts ...grpc.CallOption) (*IsActiveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsActiveResponse)
	err := c.cc.Invoke(ctx, ActiveService_IsActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeServiceClient) GetLastActiveAt(ctx context.Context, in *GetLastActiveAtRequest, opts ...grpc.CallOption) (*GetLastActiveAtResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLastActiveAtResponse)
	err := c.cc.Invoke(ctx, ActiveService_GetLastActiveAt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeServiceClient) GetActiveUsers(ctx context.Context, in *GetActiveUsersRequest, opts ...grpc.CallOption) (*GetActiveUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActiveUsersResponse)
	err := c.cc.Invoke(ctx, ActiveService_GetActiveUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActiveServiceServer is the server API for ActiveService service.
// All implementations must embed UnimplementedActiveServiceServer
// for forward compatibility.
type ActiveServiceServer interface {
	IsActive(context.Context, *IsActiveRequest) (*IsActiveResponse, error)
	GetLastActiveAt(context.Context, *GetLastActiveAtRequest) (*GetLastActiveAtResponse, error)
	GetActiveUsers(context.Context, *GetActiveUsersRequest) (*GetActiveUsersResponse, error)
	mustEmbedUnimplementedActiveServiceServer()
}

// UnimplementedActiveServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedActiveServiceServer struct{}

func (UnimplementedActiveServiceServer) IsActive(context.Context, *IsActiveRequest) (*IsActiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsActive not implemented")
}
func (UnimplementedActiveServiceServer) GetLastActiveAt(context.Context, *GetLastActiveAtRequest) (*GetLastActiveAtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastActiveAt not implemented")
}
func (UnimplementedActiveServiceServer) GetActiveUsers(context.Context, *GetActiveUsersRequest) (*GetActiveUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveUsers not implemented")
}
func (UnimplementedActiveServiceServer) mustEmbedUnimplementedActiveServiceServer() {}
func (UnimplementedActiveServiceServer) testEmbeddedByValue()                       {}

// UnsafeActiveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActiveServiceServer will
// result in compilation errors.
type UnsafeActiveServiceServer interface {
	mustEmbedUnimplementedActiveServiceServer()
}

func RegisterActiveServiceServer(s grpc.ServiceRegistrar, srv ActiveServiceServer) {
	// If the following call pancis, it indicates UnimplementedActiveServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ActiveService_ServiceDesc, srv)
}

func _ActiveService_IsActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveServiceServer).IsActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActiveService_IsActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveServiceServer).IsActive(ctx, req.(*IsActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveService_GetLastActiveAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastActiveAtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveServiceServer).GetLastActiveAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActiveService_GetLastActiveAt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveServiceServer).GetLastActiveAt(ctx, req.(*GetLastActiveAtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveService_GetActiveUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveServiceServer).GetActiveUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActiveService_GetActiveUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveServiceServer).GetActiveUsers(ctx, req.(*GetActiveUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActiveService_ServiceDesc is the grpc.ServiceDesc for ActiveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActiveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ActiveService",
	HandlerType: (*ActiveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsActive",
			Handler:    _ActiveService_IsActive_Handler,
		},
		{
			MethodName: "GetLastActiveAt",
			Handler:    _ActiveService_GetLastActiveAt_Handler,
		},
		{
			MethodName: "GetActiveUsers",
			Handler:    _ActiveService_GetActiveUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apis/active/v1/active.proto",
}
